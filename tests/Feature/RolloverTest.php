<?php


namespace Tests\Unit;

use App\GradeLevels;
use App\Http\Controllers\RolloverController;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;
use App\SchoolYear;

class RolloverTest extends TestCase
{

    protected $dataTables;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // Reset tables to default pre-rollover state
        exec("php artisan db:seed --class=SchoolYearsTableSeeder");
        exec("php artisan db:seed --class=GradeLevelsTableSeeder");

        $this->dataTables = [
            'allotments' => 74547,
            'allotment_types' => 784,
            'allot_formulas' => 1180,
            'allot_formulas_meta' => 8,
            'allot_grade_levels' => 3554,
            'announcements' => 1,
            'categories' => 72,
            'grades' => 104,
            'grade_levels' => 40,
            'membership' => 38081,
            'mileage' => 342,
            'mileage_vars' => 2,
            'newparms' => 16,
            'reporting_days' => 32,
            'schools' => 1443,
            'school_grades' => 7348,
            'school_type' => 46,
            'school_years' => 8,
            'specific_reports' => 13,
            'users' => 12,
            'user_role' => 3
        ];
    }

    public function test_getCurrentSchoolYear()
    {
        $ro = new RolloverController();
        $currentYear = $ro->getCurrentSchoolYear();
        //var_dump($currentYear);
        $this->assertEquals('2013', $currentYear);
    }

    public function test_correctInitialDataCount()
    {
        $ro = new RolloverController();
        $ro->countem('pre');
        $testArray = $ro->getPreRolloverCount();
        $this->assertEquals($this->dataTables, $testArray);
    }


    public function test_canAddNewGradeLevels()
    {
        $testCurrYear = 2013;
        $testNewYear = 2006;
        $map = GradeLevels::addNewYearValues($testCurrYear, $testNewYear);

        $this->assertIsArray($map);
        $this->assertGreaterThan(count($this->dataTables['grade_levels']) + count($map), count($this->dataTables['grade_levels']));
    }


    public function test_canAddNewSchoolYearRecord()
    {
        $data = [
            'school_year' => 2006,
            'display' => '2006-2007',
            'current_ind' => 0,
            'admin_current_ind' => 0,
            'visible_to_schools' => 1
        ];

//        $syr = new SchoolYears();
//        $newSchoolYearId = $syr->addSchoolYear($data['school_year'], $data['display']);
        SchoolYear::addSchoolYear($data['school_year'], $data['display']);

        $result = DB::table('school_years')
            ->where('school_year', '=', $data['school_year'])
            ->pluck('school_year')
            ->all();

        $this->assertIsInt($result[0]);
    }

    public function test_getLegacySchools()
    {
        $actualSchoolCount = 171;
        $ro = new RolloverController();
        $lSchools = $ro->getLegacySchools();

        $this->assertEquals(count($lSchools), $actualSchoolCount);
    }

    public function test_addLegacySchools()
    {
        $ro = new RolloverController();
        $lSchools = $ro->getLegacySchools();
        $afterImportCount = count($lsSchools) + $this->dataTables['schools'];

        $ro->importLegacySchools();
    }

    public function tearDown(): void
    {
        // roll back the school_years table
        //exec("php artisan db:seed --class=SchoolYearsTableSeeder");

        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
